AWSTemplateFormatVersion: 2010-09-09
Description: >-
  aws-image-upload
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  GetSignedUrlHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-signed-url.getSignedUrlHandler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 29
      Description: A simple example includes a HTTP get method that returns
        the presigned url for image upload
      Policies:
      Environment:
        Variables:
          FULL_RES_BUCKET_NAME: !Ref FullResBucketName
      Events:
        Api:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: GET
            RestApiId: !Ref ServerlessRestApi
          Cors:
            AllowMethods: "'GET'" # Methods you want to allow
            AllowHeaders: "'Content-Type'" # Headers you want to allow
            AllowOrigin: "'*'"
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  GenerateThumb:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/generate-thumb.generateThumb
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 29
      Description: A Lambda function that is triggered on every bucket upload
        that generates an image thumbnail
      Policies:
      Environment:
        Variables:
          FULL_RES_BUCKET_NAME: !Ref FullResBucketName
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref FullResImageBucket
            Events: s3:ObjectCreated:*

  FullResImageBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref FullResBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
            AllowedOrigins:
              - "*"

  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref FullResImageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Statement1"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:PutObject"
            Resource: "arn:aws:s3:::full-res-image-bucket/*"

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  BucketName:
    Value: !Ref FullResImageBucket
    Description: Name of the sample Amazon S3 bucket with CORS enabled.

# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Parameters:
  FullResBucketName:
    Type: String
    Description: Name of the full resolution s3 image bucke
    Default: full-res-image-bucket
  Region:
    Type: String
    Description: Name of the full resolution s3 image bucke
    Default: eu-central-1

Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
